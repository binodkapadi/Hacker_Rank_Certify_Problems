// 1) ROAD REPAIR:

CODE IN JAVA:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'getMinCost' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY crew_id
     *  2. INTEGER_ARRAY job_id
     */

    public static long getMinCost(List<Integer> crew_id, List<Integer> job_id) {
        
    long cost=0;
    
    Collections.sort(crew_id);
    
    Collections.sort(job_id);
    
    int len1=crew_id.size();
    
    int len2=job_id.size();
    
    if(len1==len2)
    {
        for(int i=0;i<len1;i++)
        {
            if(job_id.get(i)>=crew_id.get(i))
            {
                cost=cost+(job_id.get(i)-crew_id.get(i));
            }
            else if(job_id.get(i)<crew_id.get(i))
            {
                cost=cost+(crew_id.get(i)-job_id.get(i));
            }
        }
    }
    
    return cost;

    }

}


// 2) PARALLEL SYSTEM:

CODE IN C++:

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'minTime' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY files
 *  2. INTEGER numCores
 *  3. INTEGER limit
 */

long minTime(vector<int> files, int numCores, int limit) {

long long int ans=0;
int k=1;
vector<int> v;
for(int i=0;i<files.size();i++)
{
    if(files[i]%numCores!=0){
        ans+=files[i];
    }
    else
    {
        v.push_back(files[i]);
    }
}
cout<<ans;
sort(v.begin(), v.end());
for(int i=v.size()-1;i>=0;i--)
{
    if(k<=limit){
        ans+=(v[i]/numCores);
        k++;
    }
    else
    ans+=v[i];
}
return ans;
}
